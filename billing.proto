syntax = "proto3";

package billing;

// *************************************************
// Messages shared by the Billing service and Kafka workflow
// *************************************************

// This is the generic message that can be sent through Kafka.
// All messages can be serialized and written to the internals of this message for transport.
message Kafka {
  // A string which represents the type of message serialized into the serialized_message field
  string message_type = 1;

  // A message of the above type serialized as a byte array
  bytes serialized_message = 2;
}

// The different payment types the client can use
enum PaymentType {
  VISA = 0;
  MASTERCARD = 1;
  DISCOVER = 2;
  AMEX = 3;
}

// This is the message the client fills out when it wants to make a payment
message PaymentClient {
  // Which payment type the client is paying with
  PaymentType payment_type = 1;

  // The amount the client is paying
  double amount = 2;
}

// This is the message the proxy will fill out and send through Kafka to the backend
message PaymentBackend {
  // This contains all the data the client originally sent.
  PaymentClient client_payment_info = 1;

  // This is a unique ID assigned to the transaction by the proxy which will allow it to
  // route the message back to the proper client.
  uint64 transaction_id = 2;

  // This is filled out by the proxy, this is the Kafka topic it is consuming from.
  // The backend should publish its reply to this topic.
  string proxy_topic = 3;

  // This should be filled out by the backend.
  bool payment_accepted = 4;

  // This should be filled out by the backend if payment was not accepted.
  string error_message = 5;
}


// *************************************************
// Billing service and messages used by the client and proxy only
// *************************************************

// The message the proxy responds with from a client's payment request
message PaymentResponse {
  PaymentClient client_payment_info = 1;

  bool payment_accepted = 2;

  string error_message = 3;
}

service Billing {
  // The client wants to make a payment
  rpc MakePayment (PaymentClient) returns (PaymentResponse) {}
}
